import telebot
import random
import json
import os

bot = telebot.TeleBot("5950485062:AAHk11VIaP2FRIRJuIFcsaXHWyNrxzI5kuk")

reply_keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
btn1 = telebot.types.KeyboardButton("1Ô∏è‚É£–í–≥–∞–¥–∞–π —á–∏—Å–ª–æ")
btn2 = telebot.types.KeyboardButton("ü™®‚úÇÔ∏èüìÑ–ö–∞–º—ñ–Ω—å –Ω–æ–∂–∏—Ü—ñ –ø–∞–ø—ñ—Ä")
btn3 = telebot.types.KeyboardButton("‚ùå‚≠ïÔ∏è–•—Ä–µ—Å—Ç–∏–∫–∏ –Ω—É–ª–∏–∫–∏")
reply_keyboard.add(btn1, btn2, btn3)

inline_keyboard = telebot.types.InlineKeyboardMarkup()
inl1 = telebot.types.InlineKeyboardButton("ü™®", callback_data = "Stone")
inl2 = telebot.types.InlineKeyboardButton("‚úÇÔ∏è", callback_data = "Scissor")
inl3 = telebot.types.InlineKeyboardButton("üìÑ", callback_data = "Paper")
inline_keyboard.add(inl1, inl2, inl3)

xo_keyboard = telebot.types.InlineKeyboardMarkup(row_width=3)
count = 1
for i in range(3):        
    xo_btn1 = telebot.types.InlineKeyboardButton("‚¨úÔ∏è", callback_data = f"xo{count+0}")
    xo_btn2 = telebot.types.InlineKeyboardButton("‚¨úÔ∏è", callback_data = f"xo{count+1}")
    xo_btn3 = telebot.types.InlineKeyboardButton("‚¨úÔ∏è", callback_data = f"xo{count+2}")
    count += 3
    xo_keyboard.add(xo_btn1, xo_btn2, xo_btn3)
    

@bot.message_handler(content_types=["text", "photo"])
def get_text(message):
    if message.text == "/start" or message.text == "/new_game":  
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≥—Ä—É!", reply_markup = reply_keyboard)
    elif message.text == "1Ô∏è‚É£–í–≥–∞–¥–∞–π —á–∏—Å–ª–æ":
        bot.send_message(message.chat.id, "–í–∏ –æ–±—Ä–∞–ª–∏ –≥—Ä—É –í–≥–∞–¥–∞–π —á–∏—Å–ª–æ", reply_markup = telebot.types.ReplyKeyboardRemove())
        
        game_number = random.randint(1,100)
        game_session = {
            'game_number': game_number
        }
        with open(str(message.chat.id)+'.json', "w") as file:
            json.dump(game_session, file)
            
        def guess_number(res):
            with open(str(message.chat.id)+'.json', "r") as f:
                user_dict = json.load(f)
                numb = user_dict["game_number"]
                numb = str(numb) 
                if numb == res.text:
                    bot.send_message(message.chat.id, "–í–∏ –≤–≥–∞–¥–∞–ª–∏! –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –≥—Ä—É:", reply_markup = reply_keyboard)
                else:
                    reset = bot.send_message(message.chat.id, "–í–∏ –Ω–µ –≤–≥–∞–¥–∞–ª–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
                    if int(numb) > int(res.text):
                        bot.send_message(message.chat.id, "–ó–∞–≥–∞–¥–∞–Ω–µ —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ")
                    if int(numb) < int(res.text):
                        bot.send_message(message.chat.id, "–ó–∞–≥–∞–¥–∞–Ω–µ —á–∏—Å–ª–æ –º–µ–Ω—à–µ")
                    bot.register_next_step_handler(reset, guess_number)

        res = bot.send_message(message.chat.id, "–ß–∏—Å–ª–æ —Å–≥–µ–Ω–µ—Ä–æ–≤–æ–Ω–æ! –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ:")
        bot.register_next_step_handler(res, guess_number)

    elif message.text == "ü™®‚úÇÔ∏èüìÑ–ö–∞–º—ñ–Ω—å –Ω–æ–∂–∏—Ü—ñ –ø–∞–ø—ñ—Ä":
        bot.send_message(message.chat.id, "–í–∏ –æ–±—Ä–∞–ª–∏ –≥—Ä—É –ö–∞–º—ñ–Ω—å –Ω–æ–∂–∏—Ü—ñ –ø–∞–ø—ñ—Ä")
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Å–∏–º–≤–æ–ª:", reply_markup = inline_keyboard)
    
    elif message.text == "‚ùå‚≠ïÔ∏è–•—Ä–µ—Å—Ç–∏–∫–∏ –Ω—É–ª–∏–∫–∏":
        bot.send_message(message.chat.id, "–í–∏ –æ–±—Ä–∞–ª–∏ –≥—Ä—É –•—Ä–µ—Å—Ç–∏–∫–∏ –Ω—É–ª–∏–∫–∏")
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–ª—ñ—Ç–∏–Ω–∫—É:", reply_markup = xo_keyboard)
        
def change_board():
    pass

def make_move(id, data, old_moves):
    if old_moves == None: 
        dict_game3 = {
            "id": id,
            "all_cells": []
        }
    else:
        dict_game3 = {
            "id": id,
            "all_cells": old_moves 
        }
        
    player_move = {
        data[-1] : "x"
    }
    dict_game3["all_cells"].append(player_move)

    bot_replay = True
    while bot_replay == True: 
        bot_replay = False
        choice_bot = str(random.randint(1, 9))     
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—Ç–∞:", choice_bot, "—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª–µ—Ç–∫–∏:", dict_game3["all_cells"])
        for n in dict_game3["all_cells"]:
            if choice_bot == n:     
                bot_replay = True  
    
    if bot_replay == False:                
        bot_move = {
            choice_bot : "o"
        }              
        dict_game3["all_cells"].append(bot_move)
        
        return dict_game3
        

@bot.callback_query_handler(func = lambda call: True)
def get_call(call):

    #–ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ö–æ–¥–æ–º –∏–∑ –∏–≥—Ä—ã –ö—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏
    if call.data in ["xo1","xo2","xo3","xo4","xo5","xo6","xo7","xo8","xo9"]: #–µ—Å–ª–∏ —è–≤–ª—è–µ—Ç—Å—è, —Ç–æ...
        if "zxc.json" not in os.listdir(): #–ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞ –≤ –Ω–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ
            with open("zxc.json","w") as file: #–∫–æ–≥–¥–∞ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–µ–º —Å–≤–æ–π —Å –Ω—É–ª—è
                res = make_move(call.message.chat.id, call.data, None) #–¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π —Ö–æ–¥ (—Å–≤–æ–π –∏ –±–æ—Ç–∞)
                bot.send_message(call.message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–ª—ñ—Ç–∏–Ω–∫—É:", reply_markup = xo_keyboard)
                json.dump(res, file) #–∑–∞–ø–∏—Å–∞–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–∏—Å—Ç–µ–º—É
        else:
            with open("zxc.json","r") as file: #–µ—Å–ª–∏ –∂–µ —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ
                my_js = json.load(file) #—Å—á–∏—Ç—ã–≤–∞–µ–º —á—Ç–æ –≤ –Ω–µ–º
            
            with open("zxc.json","w") as file: #–æ—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å
                res = make_move(call.message.chat.id, call.data, my_js["all_cells"]) #–¥–µ–ª–∞–µ–º —Ö–æ–¥ (—Å–≤–æ–π –∏ –±–æ—Ç–∞)
                bot.send_message(call.message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–ª—ñ—Ç–∏–Ω–∫—É:", reply_markup = xo_keyboard)
                json.dump(res, file) #–∑–∞–ø–∏—Å–∞–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–∏—Å—Ç–µ–º—É
    #---------------------------------------------------------
    
    else:
        call_list = ["Stone","Scissor","Paper"]
        rand_choice = random.choice(call_list)
        if call.data != rand_choice:
            if call.data =="Stone" and rand_choice == "Scissor":
                bot.send_message(call.message.chat.id, "–í–∞—à –≤–∏–±—ñ—Ä –∫–∞–º—ñ–Ω—å")
                bot.send_message(call.message.chat.id, "–í–∏–±—ñ—Ä –±–æ—Ç—É –Ω–æ–∂–∏—Ü—ñ")
                bot.send_message(call.message.chat.id, "–í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏! –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –≥—Ä—É", reply_markup = reply_keyboard)
                print("–ü–µ—Ä–µ–º–æ–≥–∞")
            elif call.data =="Stone" and rand_choice == "Paper":
                bot.send_message(call.message.chat.id, "–í–∞—à –≤–∏–±—ñ—Ä –∫–∞–º—ñ–Ω—å")
                bot.send_message(call.message.chat.id, "–í–∏–±—ñ—Ä –±–æ—Ç—É –ø–∞–ø—ñ—Ä")
                bot.send_message(call.message.chat.id, "–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑", reply_markup = inline_keyboard)
                print("–ü–æ—Ä–∞–∑–∫–∞")        
            if call.data =="Scissor" and rand_choice == "Paper":
                bot.send_message(call.message.chat.id, "–í–∞—à –≤–∏–±—ñ—Ä –Ω–æ–∂–∏—Ü—ñ")
                bot.send_message(call.message.chat.id, "–í–∏–±—ñ—Ä –±–æ—Ç—É –ø–∞–ø—ñ—Ä")
                bot.send_message(call.message.chat.id, "–í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏! –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –≥—Ä—É", reply_markup = reply_keyboard)
                print("–ü–µ—Ä–µ–º–æ–≥–∞")
            elif call.data =="Scissor" and rand_choice == "Stone":
                bot.send_message(call.message.chat.id, "–í–∞—à –≤–∏–±—ñ—Ä –Ω–æ–∂–∏—Ü—ñ")
                bot.send_message(call.message.chat.id, "–í–∏–±—ñ—Ä –±–æ—Ç—É –∫–∞–º—ñ–Ω—å")
                bot.send_message(call.message.chat.id, "–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑", reply_markup = inline_keyboard)
                print("–ü–æ—Ä–∞–∑–∫–∞")
            if call.data =="Paper" and rand_choice == "Stone":
                bot.send_message(call.message.chat.id, "–í–∞—à –≤–∏–±—ñ—Ä –ø–∞–ø—ñ—Ä")
                bot.send_message(call.message.chat.id, "–í–∏–±—ñ—Ä –±–æ—Ç—É –∫–∞–º—ñ–Ω—å")
                bot.send_message(call.message.chat.id, "–í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏! –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –≥—Ä—É", reply_markup = reply_keyboard)
                print("–ü–µ—Ä–µ–º–æ–≥–∞")
            elif call.data =="Paper" and rand_choice == "Scissor":
                bot.send_message(call.message.chat.id, "–í–∞—à –≤–∏–±—ñ—Ä –ø–∞–ø—ñ—Ä")
                bot.send_message(call.message.chat.id, "–í–∏–±—ñ—Ä –±–æ—Ç—É –Ω–æ–∂–∏—Ü—ñ")
                bot.send_message(call.message.chat.id, "–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑", reply_markup = inline_keyboard)
                print("–ü–æ—Ä–∞–∑–∫–∞")
        else:
            bot.send_message(call.message.chat.id, "–ù—ñ—Ö—Ç–æ –Ω–µ –ø–µ—Ä–µ–º—ñ–≥! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑", reply_markup = inline_keyboard)
            print("–ù—ñ—á–∏—è")
  
bot.infinity_polling()